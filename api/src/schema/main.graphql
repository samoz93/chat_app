scalar Date

type User {
  id: ID!
  name: String!
  email: String!
  rooms: [ChatRoom!]
  ownerRooms: [ChatRoom!]
  createdAt: Date
  updatedAt: Date
  friends: [User]
}

type AuthPayload {
  token: String!
  refreshToken: String!
  user: User!
}

type Message {
  id: ID!
  text: String!
  user: User!
  createdAt: Date
  updatedAt: Date
}

type ChatRoom {
  id: ID!
  name: String!
  description: String!
  owner: User!
  users: [User!]!
  messages: [Message!]!
}

type Query {
  user(id: ID!): User!
  test: [User!]!
  refresh(refreshToken: String): AuthPayload!
  getRooms(page: Int, limit: Int): [ChatRoom!]!
  getFriends: [User!]!
}

input NewUserInput {
  email: String!
  password: String!
  name: String!
}

type Mutation {
  updateUser(id: ID!, name: String!, email: String!, password: String!): User!
  deleteUser(id: ID!): User!
  login(email: String!, password: String!): AuthPayload!
  signUp(data: NewUserInput!): AuthPayload!
  createRoom(name: String!, description: String!): ChatRoom!
}
